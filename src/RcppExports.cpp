// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matMultArma
arma::mat matMultArma(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _wSIR_matMultArma(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matMultArma(A, B));
    return rcpp_result_gen;
END_RCPP
}
// computeRandZ
Rcpp::List computeRandZ(const arma::mat& X);
RcppExport SEXP _wSIR_computeRandZ(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(computeRandZ(X));
    return rcpp_result_gen;
END_RCPP
}
// fastEigen
Rcpp::List fastEigen(const arma::mat& S);
RcppExport SEXP _wSIR_fastEigen(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(fastEigen(S));
    return rcpp_result_gen;
END_RCPP
}
// subsetLowerTri
arma::vec subsetLowerTri(const arma::mat& m);
RcppExport SEXP _wSIR_subsetLowerTri(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetLowerTri(m));
    return rcpp_result_gen;
END_RCPP
}
// rank
arma::vec rank(const arma::vec& x);
RcppExport SEXP _wSIR_rank(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rank(x));
    return rcpp_result_gen;
END_RCPP
}
// spearman_correlation
arma::vec spearman_correlation(const arma::vec& x, const arma::vec& y);
RcppExport SEXP _wSIR_spearman_correlation(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(spearman_correlation(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wSIR_matMultArma", (DL_FUNC) &_wSIR_matMultArma, 2},
    {"_wSIR_computeRandZ", (DL_FUNC) &_wSIR_computeRandZ, 1},
    {"_wSIR_fastEigen", (DL_FUNC) &_wSIR_fastEigen, 1},
    {"_wSIR_subsetLowerTri", (DL_FUNC) &_wSIR_subsetLowerTri, 1},
    {"_wSIR_rank", (DL_FUNC) &_wSIR_rank, 1},
    {"_wSIR_spearman_correlation", (DL_FUNC) &_wSIR_spearman_correlation, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_wSIR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

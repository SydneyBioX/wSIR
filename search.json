[{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Weighted Sliced Inverse Regression (WSIR)","text":"Weighted Sliced Inverse Regression (wSIR) supervised dimension reduction technique spatial transcriptomics data. method uses cell’s gene expression values covariates spatial position response. allows us create low-dimensional representation gene expression data retains information spatial patterns present gene expression data. resulting mapping gene expression data spatially aware low-dimensional embedding can used project new single-cell gene expression data low-dimensional space preserves ability predict cell’s spatial location low-dimensional embedding.","code":""},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"method-overview","dir":"Articles","previous_headings":"Introduction","what":"Method Overview","title":"Weighted Sliced Inverse Regression (WSIR)","text":"wSIR extension supervised dimension reduction technique Sliced Inverse Regression (SIR). SIR existing supervised dimension reduction method works grouping together observations similar values response. spatial transcriptomics data, means grouping cells certain number tiles based spatial position. example, use 4 tiles, cells top right quadrant image/tissue go one group, top left another, . groups summarised averaging expression level cells group genes. , eigendecomposition performed resulting matrix tile-gene means, returning SIR directions SIR scores. motivation behind wSIR SIR uses cell’s spatial position separating cells given number groups/tiles. groups created, lose fact groups may spatially related (come adjacent tiles) groups (come opposite sides tissue). wSIR uses weight matrix incorporate spatial correlation pairs cells SIR algorithm. matrix dimension H*H, H number tiles, (,j)th entry represents distance tiles j. matrix incorporated eigendeomposition step. wSIR output structure SIR output.","code":""},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"vignette-overview","dir":"Articles","previous_headings":"Introduction","what":"Vignette Overview","title":"Weighted Sliced Inverse Regression (WSIR)","text":"vignette, demonstrate use WSIR obtain low-dimensional embedding gene expression data. explore embedding using package’s built-functions. However, low-dimensional matrix importantly used downstream tasks benefit lower-dimensional representation gene expression data preserves information cell’s spatial location. perform basic downstream analysis demonstrate practicality wSIR.","code":""},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Weighted Sliced Inverse Regression (WSIR)","text":"use data Lohoff et al, 2021. code allow download mouse data using MouseGastrulationData scran R packages. randomly sample 20% cells three biological replicate samples. vignette examples function wSIR, simply load data already saved data/MouseData.rda.","code":"# Packages needed to download data #library(scran) # for logNormCounts #library(MouseGastrulationData) # to download the data for this vignette  set.seed(2024)  seqfish_data_sample1 <- LohoffSeqFISHData(samples = c(1,2)) seqfish_data_sample1 = logNormCounts(seqfish_data_sample1) # log transform variance stabilising rownames(seqfish_data_sample1) <- rowData(seqfish_data_sample1)[,\"SYMBOL\"] # change rownames to gene symbols that are consistent sample1_exprs = t(assay(seqfish_data_sample1, \"logcounts\")) # extract matrix of gene expressions sample1_coords = spatialCoords(seqfish_data_sample1)[,1:2] %>% as.data.frame() colnames(sample1_coords) = c(\"x\", \"y\")  seqfish_data_sample2 <- LohoffSeqFISHData(samples = c(3,4)) seqfish_data_sample2 = logNormCounts(seqfish_data_sample2) rownames(seqfish_data_sample2) <- rowData(seqfish_data_sample2)[,\"SYMBOL\"] sample2_exprs = t(assay(seqfish_data_sample2, \"logcounts\")) sample2_coords = spatialCoords(seqfish_data_sample2)[,1:2] %>% as.data.frame() colnames(sample2_coords) = c(\"x\", \"y\")  seqfish_data_sample3 <- LohoffSeqFISHData(samples = c(5,6)) seqfish_data_sample3 = logNormCounts(seqfish_data_sample3) rownames(seqfish_data_sample3) <- rowData(seqfish_data_sample3)[,\"SYMBOL\"] sample3_exprs = t(assay(seqfish_data_sample3, \"logcounts\")) sample3_coords = spatialCoords(seqfish_data_sample3)[,1:2] %>% as.data.frame() colnames(sample3_coords) = c(\"x\", \"y\")  keep1 = sample(c(TRUE, FALSE), nrow(sample1_exprs), replace = TRUE, prob = c(0.2, 0.8)) keep2 = sample(c(TRUE, FALSE), nrow(sample2_exprs), replace = TRUE, prob = c(0.2, 0.8)) keep3 = sample(c(TRUE, FALSE), nrow(sample3_exprs), replace = TRUE, prob = c(0.2, 0.8))  sample1_exprs = sample1_exprs[keep1,] sample1_coords = sample1_coords[keep1,] sample2_exprs = sample2_exprs[keep2,] sample2_coords = sample2_coords[keep2,] sample3_exprs = sample3_exprs[keep3,] sample3_coords = sample3_coords[keep3,]  sample1_cell_types = seqfish_data_sample1$celltype[keep1] sample2_cell_types = seqfish_data_sample2$celltype[keep2] sample3_cell_types = seqfish_data_sample3$celltype[keep3]  save(sample1_exprs, sample1_coords, sample1_cell_types,       sample2_exprs, sample2_coords, sample2_cell_types,       sample3_exprs, sample3_coords, sample3_cell_types,       file = \"../data/MouseData.rda\", compress = \"xz\") data(MouseData)"},{"path":[]},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"parameter-study","dir":"Articles","previous_headings":"Supervised dimension reduction with wSIR","what":"Parameter Study","title":"Weighted Sliced Inverse Regression (WSIR)","text":"wSIR contains two parameters, alpha slices. Parameter slices number groups along spatial axis split observations wSIR algorithm. slices means pick spatial information gene expression data, risk overfitting training set. Parameter alpha modifies strength weight matrix. alpha = 0 equivalent spatial weighting, meaning weight matrix becomes identity matrix. equivalent SIR. Larger alpha values means weight given spatial correlation rather gene expression differences alone computation wSIR directions. function exploreWSIRParams performs wSIR many choices alpha slices identify appropriate parameters moving forward. , use sample 1 . parameters tuned reasonable values. function exploreWSIRParams computes visualises performance wSIR given combinations slices alpha. performance computed following procedure: 1) combination slices alpha, split data 50% train 50% test (train test halves include gene expression data cell coordinates). 2) Perform wSIR training set using current combination slices alpha. 3) Project gene expression data testing set low-dimensional space using wSIR results step 2. 4) Evaluate wSIR’s performance computing either distance correlation (“DC”, default), correlation distances (“CD”) projected gene expression data test set test coordinates, according parameter metric. 5) Repeat steps 2-4 done nrep times (nrep parameter whose default 5). Calculate average metric value nrep iterations combination slices alpha. 6) Repeat steps 1-5 combinations slices alpha obtain average metric value combination. 7) Return combination slices alpha highest average metric value display plot showing performance every combination parameters. Note: key advantage wSIR SIR parameter robustness. , can see SIR’sperformance deteriorates use larger values slices. However, wSIR’s performance relatively stable vary slices alpha across reasonable values (e.g. among default values optimise ). following plot, metric value becomes smaller increase number slices α=0\\alpha = 0 (corresponds SIR). Performance stable non-zero alpha slice combinations (correspond wSIR).","code":"a <- Sys.time() optim_obj = exploreWSIRParams(X = sample1_exprs,                                coords = sample1_coords,                                # optim_alpha = c(0,.5, 1,2,4,8),                                # optim_slices = c(5,10,15),                               optim_alpha = c(0, 4),                               optim_slices = c(10, 15),                               nrep = 5,                               metric = \"DC\") ## set up nrep random splits of the data into training and test sets ## completed runs of wSIR and metric calculation ## Optimal (alpha, slices) pair: (0, 10) Sys.time()-a ## Time difference of 6.379131 secs optim_obj$plot"},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"wsir-computation","dir":"Articles","previous_headings":"Supervised dimension reduction with wSIR","what":"wSIR Computation","title":"Weighted Sliced Inverse Regression (WSIR)","text":"next perform wSIR using optimal parameter combination found previous section. use gene expression matrix spatial coordinates sample 1 . returns list results 5 (named) slots, whose details can found ?wSIR::wSIR.","code":"wsir_obj = wSIR(X = sample1_exprs,                  coords = sample1_coords,                  slices = optim_obj$best_slices,                  alpha = optim_obj$best_alpha,                 optim_params = FALSE)  names(wsir_obj) ## [1] \"scores\"     \"directions\" \"estd\"       \"W\"          \"evalues\""},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"wsir-results-analysis","dir":"Articles","previous_headings":"","what":"wSIR Results Analysis","title":"Weighted Sliced Inverse Regression (WSIR)","text":"section, demonstrate use built-analysis functions better understand wSIR creates spatially-informed low-dimensional embedding. functions use wSIR result input. , use output previous section, meaning studying result performing wSIR sample 1 .","code":""},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"wsir-top-genes","dir":"Articles","previous_headings":"wSIR Results Analysis","what":"wSIR Top Genes","title":"Weighted Sliced Inverse Regression (WSIR)","text":"findTopGenes function finds plots genes highest loading specified wSIR directions (default direction 1). gene high loading (terms magnitude), important wSIR direction. Since wSIR directions designed retain information cell’s spatial position, genes high loading spatially-related genes. plot , can see genes highest loading wSIR direction 1. useful gives us intuition wSIR creates low-dimensional embedding. can see genes known spatial genes (e.g. Cdx2, Hox-), expect see. can simultaneously plot top genes multiple directions, utilise ","code":"top_genes_obj = findTopGenes(WSIR = wsir_obj, highest = 8) # create top genes object top_genes_plot = top_genes_obj$plot # select plot top_genes_plot # print plot top_genes_obj = findTopGenes(WSIR = wsir_obj, highest = 8, dirs = 2:4) top_genes_plot = top_genes_obj$plot top_genes_plot"},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"visualising-wsir-scores","dir":"Articles","previous_headings":"wSIR Results Analysis","what":"Visualising wSIR Scores","title":"Weighted Sliced Inverse Regression (WSIR)","text":"visualiseWSIRDirections function plots cell spatial position, coloured value specified wSIR columns. gives us understanding column low-dimensional embedding represents. , visualise cells spatial positions, coloured 5 wSIR directions top left plot illustrates , example, wSIR direction 1 captures information “y” spatial axis, since cells higher “y” coordinate low wSIR1 value, cells lower “y” coordinate higher wSIR1 value. wSIR2 shown next plot (one titled “2”), can see wSIR column two appears capture information “x” spatial coordinate. remaining three wSIR columns contain information cell types, can tell regions high low wSIR column values spread across tissue.","code":"vis_obj = visualiseWSIRDirections(coords = sample1_coords, WSIR = wsir_obj, dirs = 8) # create visualisations vis_obj"},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"umap-on-low-dimensional-embedding","dir":"Articles","previous_headings":"wSIR Results Analysis","what":"UMAP on low-dimensional embedding","title":"Weighted Sliced Inverse Regression (WSIR)","text":"two functions generateUmapFromWSIR plotUmapFromWSIR create display UMAP dimension reduction calculated wSIR low-dimensional embedding. can colour UMAP plot (point represents cell) value various genes interest. visualises structure wSIR dimension reduction space, useful gain intuition space represents. Specifically, can see wSIR space contains neighbourhoods high expression specific genes, thus better understanding space made. specify genes like include, can use output findTopGenes function , finds spatially-related genes ranking highest loading relevant wSIR directions. output value highest_genes parameter. Otherwise, also specify genes interest specific genes like visualise. example, wanted visualise expression distribution Cdx2 Hoxb4, use genes = c(\"Cdx2\", \"Hoxb4\") argument plotUmapFromWSIR (leave highest_genes blank). , use UMAP function visualise wSIR space computed gene expression data sample 1. colour cell values 6 genes highest value wSIR direction 1 (found findTopGenes function previously). can see genes, specific regions high expression UMAP plots, suggesting wSIR space separates cells based expression genes.","code":"umap_coords = generateUmapFromWSIR(WSIR = wsir_obj) umap_plots = plotUmapFromWSIR(X = sample1_exprs,                               umap_coords = umap_coords,                               highest_genes = top_genes_obj,                               n_genes = 6) umap_plots"},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"projection-of-new-data-with-wsir","dir":"Articles","previous_headings":"","what":"Projection of new data with wSIR","title":"Weighted Sliced Inverse Regression (WSIR)","text":"key functionality wSIR package ability project new single-cell data wSIR low-dimensional space. allow low-dimensional representation gene expression data contains information cell’s spatial position even though access spatial coordinates new data. low-dimensional wSIR embedding especially useful downstream applications, like spatial alignment spatial clustering (don’t spatial coordinates). , demonstrate steps , well specific application. projection example, perform wSIR spatial transcriptomics dataset includes gene expression data spatial coordinates. project “single-cell” dataset, contains gene expression matrix, wSIR low-dimensional space.","code":""},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"single-sample-spatial-dataset-single-sample-single-cell-dataset","dir":"Articles","previous_headings":"Projection of new data with wSIR","what":"Single-sample spatial dataset, single-sample single-cell dataset","title":"Weighted Sliced Inverse Regression (WSIR)","text":", demonstrate steps project new sample single-cell dataset wSIR low-dimensional space already performed wSIR spatial transcriptomics dataset first sample. already performed wSIR sample 1, project sample 2’s gene expression matrix wSIR low-dimensional space, therefore ability predict sample 2’s (unknown stage) spatial locations. Check dimension sample 2’s low-dimensional gene expression data: Observe sample 2’s low-dimensional gene expression data: low-dimensional gene expression data can used later tasks benefit low-dimensional embedding gene expression data samples, rather just gene expression data.","code":"sample2_low_dim_exprs = projectWSIR(wsir = wsir_obj, newdata = sample2_exprs) dim(sample2_low_dim_exprs) ## [1] 2986   50 head(sample2_low_dim_exprs) ##            [,1]       [,2]       [,3]       [,4]     [,5]       [,6]       [,7] ## [1,]  0.4033853 -1.1406906  0.9342274 -0.6690855 1.183150 -0.4204610 -1.6947454 ## [2,] -0.3976906 -1.1332231  0.2099434 -0.9262752 1.452108 -0.3434242  0.2826430 ## [3,]  2.8521104  0.5786873  1.7263464 -0.4939740 1.545942  1.9442965 -0.9077402 ## [4,]  3.0851403  0.8251517  0.6092021 -0.5964077 1.349482  1.1061599 -0.8913565 ## [5,]  1.7075150 -1.5915042 -0.4335929 -0.6712088 1.829439  1.3707372  0.8978932 ## [6,]  1.5921375 -1.3481260 -0.4065247  0.1631131 1.854096  0.2094885  0.5237807 ##            [,8]        [,9]       [,10]      [,11]      [,12]        [,13] ## [1,] -1.2416277  1.59455858  0.87866970  0.1545180 -0.1226031  0.007213118 ## [2,] -0.9156203 -0.01792227  0.17127514 -0.6272048  0.3600095  0.041998794 ## [3,] -1.1414361  0.88014085  0.10466509 -1.1003643  0.2268346  0.104254143 ## [4,] -1.5925948  0.98843793  0.55220381 -0.9919387  1.0468458  0.535745625 ## [5,] -1.5563948 -0.37715216 -0.29244180 -0.4787738  0.4219472 -0.599094022 ## [6,] -1.1472571 -0.85171920  0.06985137 -0.5388220 -0.4363146 -1.735954576 ##            [,14]      [,15]      [,16]       [,17]      [,18]        [,19] ## [1,] -0.26403842 -0.1667892 -0.1674317 -0.84025812 -1.2032348 -1.923318769 ## [2,]  0.02027922 -0.1912650  0.4971098 -0.03229449 -0.6919699 -0.005947897 ## [3,] -1.07366605 -0.6264570  1.6476511 -1.85407880 -1.2730726 -0.277065604 ## [4,] -0.26912731  0.1633992  1.3475923 -1.08817836 -0.8927717  0.104622662 ## [5,] -0.11342803 -0.7663365  0.3608360  1.22403405 -0.8265268  1.261045070 ## [6,]  0.66379966 -1.2086104 -0.1218102  0.83435792 -1.8961773  1.151805215 ##           [,20]       [,21]       [,22]      [,23]      [,24]       [,25] ## [1,] -1.3525301 -0.90228595  0.21986234  1.7140137  1.7309975  0.74602409 ## [2,] -0.8091922 -2.27363291  0.20854077 -0.1540283 -1.1164174 -0.05310395 ## [3,]  0.5378237 -0.03316571 -0.27216629 -0.5039993 -0.1865994 -0.79026591 ## [4,] -0.3044058  0.39915731 -0.54615606 -1.0883485 -0.6943658 -1.00291231 ## [5,] -0.1299859 -1.53565884  0.03956295 -0.5873782  0.1000467 -1.63964609 ## [6,] -0.6253794 -0.99818155  0.14399058 -0.4114348 -0.3822816 -0.54459743 ##            [,26]      [,27]      [,28]      [,29]      [,30]        [,31] ## [1,]  0.35040014 -1.9244114  1.0994142 -0.8017454 0.06630328  0.018409306 ## [2,] -0.04033414 -2.4342194  0.1775621  0.4003911 1.99938051 -0.001305528 ## [3,] -0.16474872 -1.2637777  0.1026267  0.2428714 0.58283064  0.195284812 ## [4,] -0.32528226 -0.6078707 -0.1877018  0.3551147 0.25573785 -0.906437879 ## [5,] -1.00529104 -1.7031747  1.2513900  0.4557731 0.18030373  0.863123205 ## [6,] -1.13653850 -1.8444441 -0.1379572  0.2130001 0.62098951  0.555737550 ##           [,32]       [,33]       [,34]       [,35]      [,36]       [,37] ## [1,]  0.3581564 -0.29453308 -1.22243261 -0.83359997  0.5626265  0.27147656 ## [2,] -0.2014190 -0.32778650 -0.54913966 -1.38506568 -0.2047991 -0.55698357 ## [3,] -0.3263791 -0.32772422  0.19305454 -0.01615896  0.1681945 -0.03517469 ## [4,] -0.5392833 -0.06349666 -0.32993882 -1.26199626  0.3987478  0.47164230 ## [5,] -0.2326273 -0.49177219 -0.22691262 -1.14278654  1.1506724  0.50078317 ## [6,]  0.5669336 -0.12087072  0.00246478 -0.45564116  0.2931448  0.29778589 ##           [,38]       [,39]      [,40]       [,41]     [,42]      [,43] ## [1,] -0.7485256  0.41777984  0.4383434 -2.50295425 0.3573508 -1.6484713 ## [2,]  0.7616677  0.77111513 -1.1546844 -0.50097650 0.6704736  0.9528671 ## [3,]  0.2185019  0.16336572 -0.3048052 -0.92621527 0.7283678  0.2140502 ## [4,]  0.1381785 -0.05387757 -0.4122033 -0.09306071 0.7372195 -0.0273528 ## [5,]  0.3879110  0.19807621 -0.5889438 -0.69818005 0.6589139  0.4508320 ## [6,]  0.6482173  0.20978183 -1.0426766 -1.42117800 0.4702585  0.2349036 ##           [,44]       [,45]       [,46]       [,47]      [,48]      [,49] ## [1,] -0.4895815 -0.59446975  0.71408399 -1.23068370  0.3799625 -0.3894140 ## [2,] -0.2195819  0.62827717 -0.52972392  1.08694513  0.5879184 -2.0141168 ## [3,]  0.2567104 -0.48469833  0.12967940  0.37968571  0.4806475 -0.5887303 ## [4,]  0.1112703  0.02530738 -0.21172745  0.99822491  0.5224671 -0.6332211 ## [5,]  0.2628886  0.19487445 -0.07063846 -0.59261012 -0.2320150 -0.7073504 ## [6,]  0.9833049 -0.10346168  0.52593553  0.01375025  0.1666974 -0.5304861 ##            [,50] ## [1,] -0.39796516 ## [2,] -0.02853424 ## [3,] -0.06295446 ## [4,]  0.44533316 ## [5,] -0.25872334 ## [6,] -0.23373365"},{"path":"https://sydneybiox.github.io/wSIR/articles/wSIR_vignette.html","id":"multi-sample-spatial-dataset-single-sample-single-cell-dataset","dir":"Articles","previous_headings":"Projection of new data with wSIR","what":"Multi-sample spatial dataset, single-sample single-cell dataset","title":"Weighted Sliced Inverse Regression (WSIR)","text":", perform wSIR samples 1 2 together. requires gene expression matrices samples joined together one matrix, coords dataframes joined one dataframe. concatenation using rbind. specify sample IDs row joined expression matrix coordinates dataframe using samples argument. vector “1” row sample 1 “2” row sample 2. use resulting wSIR output project gene expression data sample 3 low-dimensional space. check dimension resulting matrix. low-dimensional matrix can used downstream tasks benefit low-dimensional embedding sample 3’s gene expression matrix contains information cell’s location. Examples downstream use include spatial alignment single-cell spatial gene expression data via Tangram, using wSIR scores input rather (unreduced) gene expression matrix. example simple application using wSIR scores input KNN cell type classification algorithm. demonstrated , using ‘knn’ function ‘class’ package. code, use wSIR scores input simple KNN-based cell type classification tool. print tail prediction vector, demonstrating can use wSIR-based low-dimensional gene expression data new sample step realistic analysis pipeline.","code":"wsir_obj_samples12 <- wSIR(X = rbind(sample1_exprs, sample2_exprs),                            coords = rbind(sample1_coords, sample2_coords),                            samples = c(rep(1, nrow(sample1_coords)), rep(2, nrow(sample2_coords))),                            slices = optim_obj$best_slices,                             alpha = optim_obj$best_alpha,                            optim_params = FALSE)  sample3_low_dim_exprs <- projectWSIR(wsir = wsir_obj_samples12, newdata = sample3_exprs) dim(sample3_low_dim_exprs) ## [1] 4607   50 samples12_cell_types = append(sample1_cell_types, sample2_cell_types)  knn_classification_object = knn(train = wsir_obj_samples12$scores,                                  test = sample3_low_dim_exprs,                                 cl = samples12_cell_types,                                 k = 10)  tail(knn_classification_object) ## [1] Presomitic mesoderm Presomitic mesoderm Presomitic mesoderm ## [4] Presomitic mesoderm Presomitic mesoderm Presomitic mesoderm ## 24 Levels: Allantois Anterior somitic tissues ... Surface ectoderm sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] class_7.3-22       umap_0.2.10.0      vctrs_0.6.5        doBy_4.6.24        ##  [5] Rfast_2.1.0        RcppParallel_5.1.9 RcppZiggurat_0.1.6 Rcpp_1.0.13        ##  [9] ggplot2_3.5.1      magrittr_2.0.3     wSIR_0.99.1        BiocStyle_2.32.1   ##  ## loaded via a namespace (and not attached): ##  [1] rlang_1.1.4                 matrixStats_1.4.1           ##  [3] compiler_4.4.1              png_0.1-8                   ##  [5] systemfonts_1.1.0           stringr_1.5.1               ##  [7] pkgconfig_2.0.3             SpatialExperiment_1.14.0    ##  [9] crayon_1.5.3                fastmap_1.2.0               ## [11] backports_1.5.0             magick_2.8.5                ## [13] XVector_0.44.0              labeling_0.4.3              ## [15] utf8_1.2.4                  rmarkdown_2.28              ## [17] UCSC.utils_1.0.0            ragg_1.3.3                  ## [19] purrr_1.0.2                 xfun_0.48                   ## [21] zlibbioc_1.50.0             cachem_1.1.0                ## [23] GenomeInfoDb_1.40.1         jsonlite_1.8.9              ## [25] highr_0.11                  DelayedArray_0.30.1         ## [27] BiocParallel_1.38.0         Deriv_4.1.6                 ## [29] broom_1.0.7                 parallel_4.4.1              ## [31] R6_2.5.1                    bslib_0.8.0                 ## [33] stringi_1.8.4               reticulate_1.39.0           ## [35] boot_1.3-30                 GenomicRanges_1.56.1        ## [37] jquerylib_0.1.4             bookdown_0.40               ## [39] SummarizedExperiment_1.34.0 knitr_1.48                  ## [41] modelr_0.1.11               IRanges_2.38.1              ## [43] Matrix_1.7-0                tidyselect_1.2.1            ## [45] abind_1.4-8                 yaml_2.3.10                 ## [47] codetools_0.2-20            lattice_0.22-6              ## [49] tibble_3.2.1                Biobase_2.64.0              ## [51] withr_3.0.1                 askpass_1.2.1               ## [53] evaluate_1.0.0              desc_1.4.3                  ## [55] pillar_1.9.0                BiocManager_1.30.25         ## [57] MatrixGenerics_1.16.0       stats4_4.4.1                ## [59] generics_0.1.3              S4Vectors_0.42.1            ## [61] munsell_0.5.1               scales_1.3.0                ## [63] glue_1.8.0                  tools_4.4.1                 ## [65] distances_0.1.11            RSpectra_0.16-2             ## [67] fs_1.6.4                    cowplot_1.1.3               ## [69] grid_4.4.1                  tidyr_1.3.1                 ## [71] colorspace_2.1-1            SingleCellExperiment_1.26.0 ## [73] GenomeInfoDbData_1.2.12     cli_3.6.3                   ## [75] textshaping_0.4.0           fansi_1.0.6                 ## [77] S4Arrays_1.4.1              dplyr_1.1.4                 ## [79] gtable_0.3.5                sass_0.4.9                  ## [81] digest_0.6.37               BiocGenerics_0.50.0         ## [83] SparseArray_1.4.8           rjson_0.2.23                ## [85] farver_2.1.2                htmltools_0.5.8.1           ## [87] pkgdown_2.1.1               lifecycle_1.0.4             ## [89] httr_1.4.7                  microbenchmark_1.5.0        ## [91] openssl_2.2.2               MASS_7.3-60.2"},{"path":"https://sydneybiox.github.io/wSIR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Woollard. Author, maintainer, contributor. Pratibha Panwar. Contributor. Linh Nghiem. Author, contributor. Shila Ghazanfar. Author, contributor.","code":""},{"path":"https://sydneybiox.github.io/wSIR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Woollard M, Nghiem L, Ghazanfar S (2024). wSIR: Weighted Sliced Inverse Regression (wSIR) supervised dimension reduction spatial transcriptomics single cell gene expression data. R package version 0.99.1, https://sydneybiox.github.io/wSIR.","code":"@Manual{,   title = {wSIR: Weighted Sliced Inverse Regression (wSIR) for supervised dimension reduction of spatial transcriptomics and single cell gene expression data},   author = {Max Woollard and Linh Nghiem and Shila Ghazanfar},   year = {2024},   note = {R package version 0.99.1},   url = {https://sydneybiox.github.io/wSIR}, }"},{"path":"https://sydneybiox.github.io/wSIR/index.html","id":"wsir","dir":"","previous_headings":"","what":"Weighted Sliced Inverse Regression (wSIR) for supervised dimension reduction of spatial transcriptomics and single cell gene expression data","title":"Weighted Sliced Inverse Regression (wSIR) for supervised dimension reduction of spatial transcriptomics and single cell gene expression data","text":"wSIR: Weighted Sliced Inverse Regression supervised dimension reduction spatial transcriptomics single cell gene expression data R package computation wSIR low-dimensional embedding gene expression data, using spatial coordinates. includes functions analyse resulting low-dimensional space, well mapping high-dimensional gene expression data low-dimensional space. function project new gene expression data (spatial coordinates unknown) low-dimensional space ability predict cell’s spatial location. overview method examples, see vignette website.","code":""},{"path":"https://sydneybiox.github.io/wSIR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Weighted Sliced Inverse Regression (wSIR) for supervised dimension reduction of spatial transcriptomics and single cell gene expression data","text":"{r} library(devtools) install_github(\"SydneyBioX/wSIR\")","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/MouseData.html","id":null,"dir":"Reference","previous_headings":"","what":"MouseGastrulationData — MouseData","title":"MouseGastrulationData — MouseData","text":"Data set consists spatial transcriptomics data mouse embryo. three samples, gene expression data (351 genes), spatial coordinates two-dimensional spatial plane, cell type labels. Sample 1 contains 19451 cells, sample 2 contains 14891 cells sample 3 contains 23194 cells. randomly sampled 20% cells datasets vignette examples stop data large. random sampling, 3848 cells sample 1, 2986 cells sample 2 4607 cells sample 3.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/MouseData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MouseGastrulationData — MouseData","text":"sample1_exprs row cell sample 1 column expression level gene. sample1_coords row cell sample 1 column position two spatial axes. sample1_cell_types vector whose 'th entry contains cell type 'th cell sample 1. sample2_exprs row cell sample 2 column expression level gene. sample2_coords row cell sample 2 column position two spatial axes. sample2_cell_types vector whose 'th entry contains cell type 'th cell sample 2. sample3_exprs row cell sample 3 column expression level gene. sample3_coords row cell sample 3 column position two spatial axes. sample3_cell_types vector, whose 'th entry contains cell type 'th cell sample 3.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/MouseData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"MouseGastrulationData — MouseData","text":"Integration spatial single-cell transcriptomic data elucidates mouse organogenesis, Nature Biotechnology, 2022.  Webpage: https://www.nature.com/articles/s41587-021-01006-2","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/calculatewSIR.html","id":null,"dir":"Reference","previous_headings":"","what":"calculatewSIR — calculatewSIR","title":"calculatewSIR — calculatewSIR","text":"Perform wSIR cells, based expression data reducedDim SingleCellExperiment SpatialExperiment object","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/calculatewSIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculatewSIR — calculatewSIR","text":"","code":"calculatewSIR(   x,   assay.type = \"logcounts\",   dimred = NULL,   colData_columns = NULL,   spatialCoords = FALSE,   ... )"},{"path":"https://sydneybiox.github.io/wSIR/reference/calculatewSIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculatewSIR — calculatewSIR","text":"x numeric matrix normalised gene expression data rows features columns cells. Alternatively, SingleCellExperiment SpatialExperiment containing matrix assay.type x SingleCellExperiment SpatialExperiment assay wSIR calculated. Default \"logcounts\". dimred String integer scalar specifying dimensionality reduction slot use slicing mechanism. Ignored coords given. colData_columns character vector specifying subset colData columns used wSIR slicing mechanism. Ignored coords dimred given spatialCoords logical indicating spatialCoords used wSIR slicing mechanism. Ignored coords, dimred, colData_columns given, x SpatialExperiment object. ... arguments passing wSIR","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/calculatewSIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculatewSIR — calculatewSIR","text":"wSIR object","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/calculatewSIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculatewSIR — calculatewSIR","text":"","code":"data(MouseData) library(SingleCellExperiment) #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians sce = SingleCellExperiment(assays = list(logcounts = t(sample1_exprs)), reducedDims = list(spatial = sample1_coords))  obj = calculatewSIR(x = sce,   dimred = \"spatial\")"},{"path":"https://sydneybiox.github.io/wSIR/reference/createWeightMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"createWeightMatrix — createWeightMatrix","title":"createWeightMatrix — createWeightMatrix","text":"function create weight matrix given location cells, tile allocations desired spatial weighting strength. Weight matrix entries represent level spatial correlation pairs tiles.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/createWeightMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"createWeightMatrix — createWeightMatrix","text":"","code":"createWeightMatrix(coords, labels, alpha = 4)"},{"path":"https://sydneybiox.github.io/wSIR/reference/createWeightMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"createWeightMatrix — createWeightMatrix","text":"coords dataframe dimension n * 2. Column names c(\"x\", \"y\"). Spatial position cell. labels dataframe dimension n * 1, column name c(\"coordinate\"). Tile allocation cell. automatically created wSIR function. alpha numeric value giving strength spatial weighting matrix. alpha = 0 returns identity matrix equals SIR. Large alpha values tend entries towards 1. Default 4.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/createWeightMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"createWeightMatrix — createWeightMatrix","text":"matrix containing weight value pairs tiles. value 0 1, 1 always diagonal.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/dot-generateBPParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to generate BPPARAM object. — .generateBPParam","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"Utility function generate BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/dot-generateBPParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"","code":".generateBPParam(cores = 1)"},{"path":"https://sydneybiox.github.io/wSIR/reference/dot-generateBPParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"cores Desired number cores BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/dot-generateBPParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"BPPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/exploreWSIRParams.html","id":null,"dir":"Reference","previous_headings":"","what":"exploreWSIRParams function — exploreWSIRParams","title":"exploreWSIRParams function — exploreWSIRParams","text":"function used select optimal values parameters slices alpha weighted sliced inverse regression based provided gene expression data corresponding spatial coordinates. given evaluation metric, visualise performance WSIR varying function parameters based data, return optimal pair. pair slices alpha can used downstream tasks.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/exploreWSIRParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exploreWSIRParams function — exploreWSIRParams","text":"","code":"exploreWSIRParams(   X,   coords,   samples = rep(1, nrow(coords)),   optim_alpha = c(0, 2, 4, 10),   optim_slices = c(5, 10, 15, 20),   metric = \"DC\",   nrep = 5,   nCores = 1,   plot = TRUE,   verbose = TRUE,   ... )"},{"path":"https://sydneybiox.github.io/wSIR/reference/exploreWSIRParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exploreWSIRParams function — exploreWSIRParams","text":"X matrix containing normalised gene expression data including n cells p genes, dimension n * p. coords dataframe containing spatial positions n cells 2D space. Dimension n * 2. Column names must c(\"x\", \"y\"). samples sample ID cell. total, must length equal number cells. example, dataset 10000 cells, first 5000 sample 1 remaining 5000 sample 2, write samples = c(rep(1, 5000), rep(2, 5000)) specify first 5000 cells sample 1 remaining sample 2. Default cells sample 1. Sample IDs can format: previous example, write samples = c(rep(\"sample 1\", 5000), rep(\"sample 2\", 5000)), result . optim_alpha vector numbers values parameter alpha use WSIR. 0 gives Sliced Inverse Regression (SIR) implementation, larger values represent stronger spatial correlation. Suggest use integers interpretability, can use non-integers. Values must non-negative. optim_slices vector integers values parameter slices use WSIR. Suggest maximum value vector around \\(\\sqrt{n/20}\\), upper bound ensures average least 10 cells per tile training set. metric character single value. Evaluation metric use parameter tuning select optimal parameter combination. String, use \"DC\" use distance correlation, \"CD\" use correlation distances, \"ncol\" number dimensions low-dimensional embedding. Default \"DC\". nrep integer number train/test splits data perform. nCores number cores parallel computing setup BiocParallel package. Default use single core plot logical whether dotplot parameters metrics produced, default TRUE verbose default TRUE ... arguments passed wSIROptimisation","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/exploreWSIRParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exploreWSIRParams function — exploreWSIRParams","text":"List five slots, named \"plot\", \"message\", \"best_alpha\", \"best_slices\" \"results_dataframe\". \"plot\" shows average metric value across nrep iterations every combination parameters slices alpha. Larger circles slices/alpha combination indicates better performance pair values. one panel per evaluation metric selected \"metrics\" argument. \"message\" tells parameter combination highest metric value according selected metric. \"best_alpha\" returns integer best alpha values among values tested according selected metric. \"best_slices\" returns integer best slices value among values tested according selected metric. \"results_dataframe\" returns results dataframe used create \"plot\". dataframe length(optim_alpha)*length(optim_slices) rows, one combination parameters slices alpha. one column \"alpha\", one \"slices\" one evaluation metrics selected \"metrics\" argument. Column \"alpha\" includes value parameter alpha, column \"slices\" includes value parameter slices, metric column includes value specified metric, either Distance Correlation (\"DC\"), Correlation Distances (\"CD\"), number columns low-dimensional embedding (\"ncol\").","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/exploreWSIRParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exploreWSIRParams function — exploreWSIRParams","text":"","code":"data(MouseData) explore_params = exploreWSIRParams(X = sample1_exprs,   coords = sample1_coords,   optim_alpha = c(0,2,4,8),   optim_slices = c(3,6,10)) #> set up nrep random splits of the data into training and test sets #> completed runs of wSIR and metric calculation #> Optimal (alpha, slices) pair: (0, 3) explore_params$plot  explore_params$message #> [1] \"Optimal (alpha, slices) pair: (0, 3)\" best_alpha = explore_params$best_alpha best_slices = explore_params$best_slices wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = FALSE,   alpha = best_alpha,   slices = best_slices)"},{"path":"https://sydneybiox.github.io/wSIR/reference/findTopGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"findTopGenes — findTopGenes","title":"findTopGenes — findTopGenes","text":"function find visualise genes highest (absolute value) loading WSIR1. genes contribute first low-dimensional direction.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/findTopGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"findTopGenes — findTopGenes","text":"","code":"findTopGenes(WSIR, highest = 10, dirs = 1)"},{"path":"https://sydneybiox.github.io/wSIR/reference/findTopGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"findTopGenes — findTopGenes","text":"WSIR wsir object output wSIR function. analyse different DR method, ensure slot named 'directions' contains loadings matrix gene names rownames. highest integer many top genes like see. Recommend 20 ease visualisation. Default 10. dirs integer vector direction / directions want show/find top genes .","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/findTopGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"findTopGenes — findTopGenes","text":"List containing two slots. First named \"plot\" shows barplot top genes corresponding loadings. Second named \"genes\" vector genes highest (absolute value) loading low-dimensional direction 1. Length parameter highest.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/findTopGenes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"findTopGenes — findTopGenes","text":"","code":"data(MouseData)  wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = FALSE,   alpha = 4,   slices = 6) # create wsir object top_genes_obj = findTopGenes(WSIR = wsir_obj, highest = 8) top_genes_plot = top_genes_obj$plot # select plot top_genes_plot # print plot"},{"path":"https://sydneybiox.github.io/wSIR/reference/generateUmapFromWSIR.html","id":null,"dir":"Reference","previous_headings":"","what":"generateUmapfromWSIR — generateUmapFromWSIR","title":"generateUmapfromWSIR — generateUmapFromWSIR","text":"function generate UMAP coordinates low-dimensional embedding gene expression data. coordinates can later plotted plotUmapFromWSIR function. two functions separate can generate UMAP points using function (may take long time), modify resulting plot much desired plotUmapFromWSIR function.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/generateUmapFromWSIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generateUmapfromWSIR — generateUmapFromWSIR","text":"","code":"generateUmapFromWSIR(WSIR)"},{"path":"https://sydneybiox.github.io/wSIR/reference/generateUmapFromWSIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generateUmapfromWSIR — generateUmapFromWSIR","text":"WSIR wsir object output wSIR function. wish generate UMAP plots based DR methods, ensure slot named \"scores\" WSIR parameter contains low-dimensional representation exprs.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/generateUmapFromWSIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generateUmapfromWSIR — generateUmapFromWSIR","text":"matrix UMAP coordinates dimension nrow(coords) * 2. Output function can directly used input plot_umap function.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/generateUmapFromWSIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generateUmapfromWSIR — generateUmapFromWSIR","text":"","code":"data(MouseData) wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = FALSE,   alpha = 4,   slices = 6) # create wsir object umap_coords = generateUmapFromWSIR(WSIR = wsir_obj) top_genes_obj = findTopGenes(WSIR = wsir_obj, highest = 4) umap_plot = plotUmapFromWSIR(umap_coords = umap_coords,   X = sample1_exprs,   highest_genes = top_genes_obj,   n_genes = 4) umap_plot"},{"path":"https://sydneybiox.github.io/wSIR/reference/plotUmapFromWSIR.html","id":null,"dir":"Reference","previous_headings":"","what":"plotUmapFromWSIR — plotUmapFromWSIR","title":"plotUmapFromWSIR — plotUmapFromWSIR","text":"function plot UMAP generated low-dimensional embedding gene expression data. points coloured value genes highest (absolute value) loading selected WSIR direction, default WSIR1.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/plotUmapFromWSIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotUmapFromWSIR — plotUmapFromWSIR","text":"","code":"plotUmapFromWSIR(   X,   umap_coords,   highest_genes = NULL,   genes = NULL,   n_genes,   ... )"},{"path":"https://sydneybiox.github.io/wSIR/reference/plotUmapFromWSIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotUmapFromWSIR — plotUmapFromWSIR","text":"X matrix containing normalised gene expression data including n cells p genes, dimension n * p. umap_coords UMAP coordinates cell output generateUmapFromWSIR function. UMAP coordinates can based dimension reduction method, e.g UMAP coordinates computed WSIR dimension reduction gene expression data, PCs (principal components), low-dimensional matrix. Must matrix dimension nrow(X) * 2. highest_genes output findTopGenes function. Default NULL error message can easily thrown genes highest_genes provided. genes vector gene names (must colnames(X)) wish show UMAP plot. cells plots coloured expression values genes provide . Must provide either genes highest_genes parameter (): provide genes want visualise specific genes, provide highest_genes want visualise genes found important WSIR directions. Default NULL error message can easily thrown genes highest_genes provided. n_genes integer number genes like show. Default number unique genes highest_genes parameter number genes (vector) parameter genes. Use parameter want show important genes (e.g select top 4 n_genes = 4). ... additional parameters ggplot functions, e.g size (size points).","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/plotUmapFromWSIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotUmapFromWSIR — plotUmapFromWSIR","text":"Grid umap plots n_genes number plots. shows cells UMAP generated low-dimensional gene expression data, coloured value genes found top_genes.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/plotUmapFromWSIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotUmapFromWSIR — plotUmapFromWSIR","text":"","code":"data(MouseData) wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = FALSE,   alpha = 4,   slices = 6) # create wsir object umap_coords = generateUmapFromWSIR(WSIR = wsir_obj) top_genes_obj = findTopGenes(WSIR = wsir_obj, highest = 4) umap_plot = plotUmapFromWSIR(umap_coords = umap_coords,   X = sample1_exprs,   highest_genes = top_genes_obj,   n_genes = 4) umap_plot"},{"path":"https://sydneybiox.github.io/wSIR/reference/projectWSIR.html","id":null,"dir":"Reference","previous_headings":"","what":"projectWSIR — projectWSIR","title":"projectWSIR — projectWSIR","text":"function project new gene expression data low-dimensional space","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/projectWSIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"projectWSIR — projectWSIR","text":"","code":"projectWSIR(wsir, newdata)"},{"path":"https://sydneybiox.github.io/wSIR/reference/projectWSIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"projectWSIR — projectWSIR","text":"wsir wsir object usually output wSIR function. want project new data low-dim space following different DR method, param wsir use list matrix loadings slot 2 (e.g PCA loadings) dimension p * d newdata matrix new gene expression data project low-dimensional space. Must p columns columns X argument used generate wsir.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/projectWSIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"projectWSIR — projectWSIR","text":"matrix low-dimensional representation newdata gene expression data","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/projectWSIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"projectWSIR — projectWSIR","text":"","code":"data(MouseData) wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = FALSE,   alpha = 4,   slices = 6) sample2_low_dim_exprs = projectWSIR(wsir = wsir_obj, newdata = sample2_exprs)"},{"path":"https://sydneybiox.github.io/wSIR/reference/runwSIR.html","id":null,"dir":"Reference","previous_headings":"","what":"runwSIR — runwSIR","title":"runwSIR — runwSIR","text":"Perform wSIR cells, based expression data reducedDim SingleCellExperiment SpatialExperiment object","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/runwSIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runwSIR — runwSIR","text":"","code":"runwSIR(x, name = \"wSIR\", scores_only = FALSE, ...)"},{"path":"https://sydneybiox.github.io/wSIR/reference/runwSIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runwSIR — runwSIR","text":"x numeric matrix normalised gene expression data rows features columns cells. Alternatively, SingleCellExperiment SpatialExperiment containing matrix name string specify name store result reducedDims output. Default \"wSIR\" scores_only logical whether wSIR scores calculated. FALSE additional information wSIR model stored attributes object. Default FALSE. ... arguments passing calculatewSIR","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/runwSIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runwSIR — runwSIR","text":"x matrix-like, list containing wSIR scores, loadings, etc. x SingleCellExperiment SpatialExperiment, object returned additional slot reducedDims(..., name) corresponding wSIR scores matrix. scores_only = FALSE, attributes wSIR scores contain following elements: directions estd W evalues","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/runwSIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"runwSIR — runwSIR","text":"","code":"data(MouseData) library(SingleCellExperiment) library(SpatialExperiment)  sce = SingleCellExperiment(assays = list(logcounts = t(sample1_exprs)), reducedDims = list(spatial = sample1_coords))  sce = runwSIR(x = sce, dimred = \"spatial\")  spe = SpatialExperiment(assays = list(logcounts = t(sample1_exprs)), spatialCoords = as.matrix(sample1_coords))  spe = runwSIR(x = spe, spatialCoords = TRUE)"},{"path":"https://sydneybiox.github.io/wSIR/reference/sirCategorical.html","id":null,"dir":"Reference","previous_headings":"","what":"sirCategorical — sirCategorical","title":"sirCategorical — sirCategorical","text":"function performs WSIR based provided gene expression data, tile allocations, weight matrix.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/sirCategorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sirCategorical — sirCategorical","text":"","code":"sirCategorical(X, Y, W = NULL, ...)"},{"path":"https://sydneybiox.github.io/wSIR/reference/sirCategorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sirCategorical — sirCategorical","text":"X matrix normalised gene expression data n genes across p cells. Y dataframe 1 column named \"coordinate\" tile allocation cell. slices^2 unique tile IDs column. W Weight matrix created createWeightMatrix. Entry (,j) represents spatial correlation level tiles j. diagonal values 1. provided, SIR implementation used.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/sirCategorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sirCategorical — sirCategorical","text":"list outputs 5 named slots. output wSIR function: final step wSIR function.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/sirPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"sirPCA — sirPCA","title":"sirPCA — sirPCA","text":"function performs eigendecomposition (X^H)^t %*% W %*% (X^H), X^H matrix scaled slice means.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/sirPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sirPCA — sirPCA","text":"","code":"sirPCA(   sliced_data,   maxDirections = 50,   W = diag(nrow(sliced_data)),   varThreshold = 0.99 )"},{"path":"https://sydneybiox.github.io/wSIR/reference/sirPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sirPCA — sirPCA","text":"sliced_data matrix scaled slice means maxDirections integer (default 50), number directions want final low-dimensional Z. W matrix slice weights. Output createWeightMatrix function. varThreshold numeric proportion eigenvalues variance t(X_H) %*% W %*% X_H retain. Default 0.99. Select higher threshold include dimensions, lower threshold include less dimensions.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/sirPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sirPCA — sirPCA","text":"list containing: 1) \"eigenvectors\" matrix eigenvectors (X^H)^t %*% W %*% (X^H) 2) \"d\" integer, selected number dimensions 3) \"evalues\" vector eigenvalues (X^H)^t %*% W %*% (X^H)","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/slicerCategorical.html","id":null,"dir":"Reference","previous_headings":"","what":"slicerCategorical — slicerCategorical","title":"slicerCategorical — slicerCategorical","text":"function averages columns X matrix category single-column Y dataframe. used find average position within tile create weight matrix, well create tile means used eigendecomposition step SIR/wSIR.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/slicerCategorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slicerCategorical — slicerCategorical","text":"","code":"slicerCategorical(X, Y)"},{"path":"https://sydneybiox.github.io/wSIR/reference/slicerCategorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"slicerCategorical — slicerCategorical","text":"X matrix dataframe containing columns average Y dataframe single column named 'coordinate'. column contains categorical variable tile ID cell.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/slicerCategorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"slicerCategorical — slicerCategorical","text":"dataframe containing averages column within category Y. Dimension h * p, h number categories Y p number columns X.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/spatialAllocator.html","id":null,"dir":"Reference","previous_headings":"","what":"spatialAllocator — spatialAllocator","title":"spatialAllocator — spatialAllocator","text":"function allocates cell tile based specified number tiles.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/spatialAllocator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spatialAllocator — spatialAllocator","text":"","code":"spatialAllocator(coords, slices = 3)"},{"path":"https://sydneybiox.github.io/wSIR/reference/spatialAllocator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"spatialAllocator — spatialAllocator","text":"coords dataframe contains spatial position cell. Column names c(\"x\", \"y'). Must include row names integer 1 nrow(coords). automatically included wSIR function prior function. slices integer number slices along two spatial axes. number tiles slices^2 since two spatial axes. E.g set slices = 4 use 4^2 = 16 tiles. Default value 3.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/spatialAllocator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spatialAllocator — spatialAllocator","text":"output matrix containing slice belonging axis long format. used lapply(coords_split, spatialAllocator, slices) wSIR output dataframe cell's tile allocation \"coordinate\" column.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/visualiseWSIRDirections.html","id":null,"dir":"Reference","previous_headings":"","what":"visualiseWSIRDirections — visualiseWSIRDirections","title":"visualiseWSIRDirections — visualiseWSIRDirections","text":"function easily visualise low-dimensional gene expression data. function plots cell true spatial coordinates, coloured values WSIR1 / WSIR2 / ... . plots give intuition biological signals contained WSIR directions.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/visualiseWSIRDirections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"visualiseWSIRDirections — visualiseWSIRDirections","text":"","code":"visualiseWSIRDirections(   coords,   WSIR,   dirs = 6,   mincol = \"blue\",   maxcol = \"red\" )"},{"path":"https://sydneybiox.github.io/wSIR/reference/visualiseWSIRDirections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"visualiseWSIRDirections — visualiseWSIRDirections","text":"coords dataframe containing spatial positions n cells 2D space. Dimension n * 2. Column names must c(\"x\", \"y\"). WSIR wsir object output wSIR function. analyse different DR method, ensure slot named 'directions' contains loadings matrix gene names rownames. Must used coords parameter coords parameter function. dirs integer many low-dimensional directions like visualise. Recommend 10 ease visualisation. Default 6. mincol String colour low values low-dimensional directions. Personal choice user, default \"blue\". maxcol String colour high values low-dimensional directions. Personal choice user, default \"red\".","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/visualiseWSIRDirections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"visualiseWSIRDirections — visualiseWSIRDirections","text":"Grid plots dirs number plots. shows cells spatial positions coloured value first 'dirs' WSIR directions.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/visualiseWSIRDirections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"visualiseWSIRDirections — visualiseWSIRDirections","text":"","code":"data(MouseData) wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = FALSE,   alpha = 4,   slices = 6) # create wsir object vis_obj = visualiseWSIRDirections(coords = sample1_coords, WSIR = wsir_obj, dirs = 8) # create visualisations vis_obj"},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIR.html","id":null,"dir":"Reference","previous_headings":"","what":"wSIR — wSIR","title":"wSIR — wSIR","text":"function perform supervised dimension reduction gene expression matrix using coordinates dataframe response value. Incorporates weighting mechanism SIR algorithm generate low-dimensional representation data allow projection new single-cell gene expression data low-dimensional space.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wSIR — wSIR","text":"","code":"wSIR(   X,   coords,   optim_params = FALSE,   optim_alpha = c(0, 1, 2, 4, 8, 12),   optim_slices = c(3, 5, 7, 10, 15, 20),   metric = \"DC\",   nrep = 5,   verbose = FALSE,   ... )"},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wSIR — wSIR","text":"X matrix containing normalised gene expression data including n cells p genes, dimension n * p. coords dataframe containing spatial positions n cells 2D space. Dimension n * 2. Column names must c(\"x\", \"y\"). optim_params logical default FALSE. like wSIR automatically optimise parameters slices alpha based either distance correlation correlation distances evaluation metric. downstream task quite different either metrics, suggest tune two parameters using specific task evaluation metric. case, determine optimal slices alpha values use relevant function, setting optim_params = FALSE. optim_alpha optim_params = TRUE, values alpha optimise wSIR. 0 gives Sliced Inverse Regression (SIR) implementation, larger values represent stronger spatial correlation. Suggest use integers interpretability, can use non-integers. Values must non-negative. optim_slices optim_params = TRUE, values slices optimise wSIR. Suggest maximum value vector around \\(\\sqrt{n/20}\\), upper bound ensures average least 10 cells per tile training set. metric optim_params = TRUE, evaluation metric use parameter tuning. String, either \"DC\" use distance correlation \"CD\" use correlation distances. Default \"DC\". nrep optim_params = TRUE, integer number train/test splits data perform optimisation parameters slices alpha. verbose logical (default FALSE) whether progress messages printed ... arguments passing exploreWSIRParams wSIRSpecifiedParams","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wSIR — wSIR","text":"wSIR object list containing 5 (named) positions. scores matrix containing low-dimensional representation X wSIR algorithm. Dimension n * d, d chosen include least varThreshold proportion variance. directions matrix containing wSIR directions, dimension p * d. Use project new data low-dimensional space via X_new %*% directions. estd integer stating many dimensions computed low-dimensional space needed account varThreshold proportion variance. number dimensions scores. W matrix weight matrix cells_weight_matrix2 function evalues vector containing p eigenvalues t(X_H) %*% W %*% X_H. varThreshold parameter works evalues, e.g first j directions included sum first j evalues equals 0.95% sum evalues.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wSIR — wSIR","text":"","code":"data(MouseData) wsir_obj = wSIR(X = sample1_exprs,   coords = sample1_coords,   optim_params = TRUE,   optim_alpha = c(0,2,4),   optim_slices = c(3,6,10),   metric = \"DC\",   nrep = 1) # create wsir object #> set up nrep random splits of the data into training and test sets #> completed runs of wSIR and metric calculation #> Optimal (alpha, slices) pair: (0, 3)"},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIROptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"wSIROptimisation — wSIROptimisation","title":"wSIROptimisation — wSIROptimisation","text":"function used calculate validation metric best tuning parameters selected","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIROptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wSIROptimisation — wSIROptimisation","text":"","code":"wSIROptimisation(   exprs_train,   coords_train,   exprs_test,   coords_test,   samples_train,   slices,   alpha,   evalmetrics = c(\"CD\", \"DC\", \"ncol\"),   ... )"},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIROptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wSIROptimisation — wSIROptimisation","text":"exprs_train matrix normalised gene expression training data. coords_train dataframe containing spatial positions cells 2D space  validation data. Dimension n * 2. Column names must c(\"x\", \"y\"). exprs_test matrix normalised gene expression validation data. samples_train sample ID cell training data. total, must length equal number cells. example, dataset 10000 cells, first 5000 sample 1 remaining 5000 sample 2, write samples = c(rep(1, 5000), rep(2, 5000)) specify first 5000 cells sample 1 remaining sample 2. Default cells sample 1. Sample IDs can format: previous example, write samples = c(rep(\"sample 1\", 5000), rep(\"sample 2\", 5000)), result . slices integer number slices axis tissue. example, slices = 4 creates 4 slices along spatial axis, yielding 4^2 = 16 tiles. Default 8, suggested minimum 3. Suggest tune parameter using exploreWSIRParams() function. alpha integer specify desired strength spatial correlation. alpha = 0 gives SIR implementation. Larger values give stronger spatial correlations. Default value 4, weight matrix value pair tiles inversely proportional physical distance . Suggest tune parameter using exploreWSIRParams() function. evalmetrics evaluation metrics use parameter tuning. String, options : \"DC\" use distance correlation; \"CD\" use correlation distances; \"ncol\" use number columns low-dimensional embedding. Default three, specified metrics = c(\"DC\", \"CD\", \"ncol\"). ... arguments passed wSIRSpecifiedParams","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIROptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wSIROptimisation — wSIROptimisation","text":"Average metric value selected metric(s) train/test split.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIRSpecifiedParams.html","id":null,"dir":"Reference","previous_headings":"","what":"wSIR_specified_params — wSIRSpecifiedParams","title":"wSIR_specified_params — wSIRSpecifiedParams","text":"wSIR function specified parameters alpha, slices. used internally wSIROptimisation wSIR functions, specific values alpha slices.","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIRSpecifiedParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wSIR_specified_params — wSIRSpecifiedParams","text":"","code":"wSIRSpecifiedParams(   X,   coords,   group = NULL,   samples = rep(1, nrow(coords)),   slices = 8,   alpha = 4,   ... )"},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIRSpecifiedParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wSIR_specified_params — wSIRSpecifiedParams","text":"X matrix containing normalised gene expression data including n cells p genes, dimension n * p. coords dataframe containing spatial positions n cells 2D space. Dimension n * 2. Column names must c(\"x\", \"y\"). group factor indicating group level information cells within across samples (e.g. cell type). samples sample ID cell. total, must length equal number cells. example, dataset 10000 cells, first 5000 sample 1 remaining 5000 sample 2, write samples = c(rep(1, 5000), rep(2, 5000)) specify first 5000 cells sample 1 remaining sample 2. Default cells sample 1. Sample IDs can format: previous example, write samples = c(rep(\"sample 1\", 5000), rep(\"sample 2\", 5000)), result . slices integer number slices axis tissue. example, slices = 4 creates 4 slices along spatial axis, yielding 4^2 = 16 tiles. Default 8, suggested minimum 3. Suggest tune parameter. alpha integer specify desired strength spatial correlation. Suggest tune parameter testing dataset among e.g values c(0,2,4,8). alpha = 0 gives SIR implementation. Larger values give stronger spatial correlations. ... arguments passed sirCategorical","code":""},{"path":"https://sydneybiox.github.io/wSIR/reference/wSIRSpecifiedParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wSIR_specified_params — wSIRSpecifiedParams","text":"wSIR object list containing 5 (named) positions. 1) scores matrix containing low-dimensional representation X wSIR algorithm. Dimension n * d, d chosen include least varThreshold proportion variance. 2) directions matrix containing WSIR directions, dimension p * d. Use project new data low-dimensional space via X_new %*% directions. 3) estd integer stating many dimensions computed low-dimensional space needed account varThreshold proportion variance. number dimensions scores. 4) W matrix weight matrix createWeightMatrix function 5) evalues vector containing p eigenvalues t(X_H) %*% W %*% X_H. varThreshold parameter works evalues, e.g first j directions included sum first j evalues equals 0.95% sum evalues.","code":""},{"path":"https://sydneybiox.github.io/wSIR/news/index.html","id":"wsir-v0990-2024-09-19","dir":"Changelog","previous_headings":"","what":"wSIR v0.99.0 (2024-09-19)","title":"wSIR v0.99.0 (2024-09-19)","text":"Submitted Bioconductor.","code":""}]
